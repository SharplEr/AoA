Требование к реализации класса Algorithm.
Абстрактный класс Algorithm является оболочкой классификатора и используется в библиотеке для тестирования методом скольящего контроля.

Требуется реализовать следующие методы:

Learn(Vector[] inputDate, Vector[] resultDate) - полное обучение.
Важно: отдельные обучения независимы, то есть при каждом вызове метода Learn() должен создаваться отдельный классификатор, который ничего не знает о предыдущих вызовах Learn().

Learn(Vector[] inputDate, Vector[] resultDate, double[] rating)
Тоже что и предыдущий метод, но с использованием весовых коэффициентов, обозначающих значимость объекта обучения.

Vector Calc(Vector date)
Классификация обученным ранее алгоритмом (одного объекта).

virtual Vector[] Calc(Vector[] data) - метод реализуется автоматически через Vector Calc(Vector date), при желании можно переопределить.

ChangeThreshold(double th)
Для построения ROC кривой требуется возможность изменять порог.

double GetThreshold()
Если алгоритм находит порог в явном виде в процессе работы, будет полезно узнать какой в среднем порог он находит, в целом необязательная функция и особо эта информация ни на что не влияет.

Dispose() - если после завершения работы требуется освободить некоторые ресурсы должен быть переопределен этот метод. Имеет пустую реализацию по умолчанию.


(!!Минусы!!)
Основная проблема заключается в том, что эта оболочка понимает лишь вещественные значения. Конечно можно ей отправить целые значения как вещественные и сделать очевидное преобразование. Но, как код вызывающий алгоритм должен узнать должен ли он давать вещественные значения или целые (вещественные же нормированны от -1 до 1). Можно добавить какое-то специальное bool поле указывающее на это, будет немного костыльно, но на самом деле не такая уж большая проблема.