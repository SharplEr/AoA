Требование к реализации класса Algorithm.
Абстрактный класс Algorithm является оболочкой классификатора и используется в библиотеке для тестирования методом скольящего контроля.

Была добавлена новая система ввода вывода, а старая скоро будет удалена. Поэтому сперва пару слов о ней. Почти все изменения касаются пространства имен IOData:

Новые классы призваны работать с разными представлениями исходных данных. И выполняют преобразования по требованию.

==============

Класс Result представляет из себя один ответ в виде класса. Поле Number соответствет номеру класса начиная с 0. Поле MaxNumber хранит общее число классов (требуется для преобразование). Поле Spectrum хранит Vector, длины MaxNumber, в котором элемент с номером Number имеет значение +1, а остальные -1. Инициализировать класс Result можно как целым значением так и вектором, а потом считывать любое, все преобразования будут выполнены автоматически и только один раз при первом обращении.

Класс Results хранит массив Result'-ов. Имеет некоторые очень удобные функции. В будущем, возможно, класс Result исчезнит и будет один класс Results.

Класс MixData хранит исходные данные в смешанном формате - вещественные данные в вещественном виде, а дискретные в дискретном.

Класс FullData предоставляет оболочку для Results, а так же 3-х типав представления даннных:
1. Смешанное в классе MixData.
2. Только дискретное в виде int[][]. (почти не тестировал)
3. Только вещественное в виде Vector[].
Фактически предоставляет все данные сразу. Все преобразования выполняются по требованию лишь однажды.

В пространстве имен AoA имеются два производных класса от FullData. Они его инкапсулируют. Первый это

SigmentInputData -- он предоставляет оболочку к доступу только части исходных данных (возможно перемешанной), закрывая доступ к ответам в объекте типа Result. Используется в скользящем контроле при проверке обученной сети.

SigmentData -- наследует SigmentInputData. Имеет доступ к ответам. Импользуется на стадии обучения.

==================

Возвращаясь к Algorithm.

Требуется реализовать следующие методы:

Learn(SigmentData data) - полное обучение.
Важно: отдельные обучения независимы, то есть при каждом вызове метода Learn() должен создаваться отдельный классификатор, который ничего не знает о предыдущих вызовах Learn().

Learn(SigmentData data, double[] rating)
Тоже что и предыдущий метод, но с использованием весовых коэффициентов, обозначающих значимость объекта обучения. !!Можно не реализовывать! Это потребуется лишь при Бустинге!!

Results Calc(SigmentInputData date)
Классификация обученным ранее алгоритмом группы объектов.

ChangeThreshold(double th)
Для построения ROC кривой требуется возможность изменять порог.

double GetThreshold()
Если алгоритм находит порог в явном виде в процессе работы, будет полезно узнать какой в среднем порог он находит, в целом необязательная функция и особо эта информация ни на что не влияет.

Dispose() - если после завершения работы требуется освободить некоторые ресурсы должен быть переопределен этот метод. Имеет пустую реализацию по умолчанию.